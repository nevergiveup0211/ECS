Description: >
    ECS cluster and Auto Scaling Group


Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: ecs-example
        
    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: t2.small

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

Mappings:
  

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-67ab9e02
        us-east-1:
            AMI: ami-5e414e24
        us-west-2:
            AMI: ami-10ed6968
        us-west-1:
            AMI: ami-00898660
        eu-west-3:
            AMI: ami-6fa21412
        eu-west-2:
            AMI: ami-42a64325
        eu-west-1:
            AMI: ami-880d64f1
        eu-central-1:
            AMI: ami-63cbae0c
        ap-northeast-2:
            AMI: ami-0acc6e64
        ap-northeast-1:
            AMI: ami-e3166185
        ap-southeast-2:
            AMI: ami-36867d54
        ap-southeast-1:
            AMI: ami-66c98f1a
        ca-central-1:
            AMI: ami-4b9c182f
        ap-south-1:
            AMI: ami-ca8ad9a5
        sa-east-1:
            AMI: ami-69f7b805

Resources:

    ECSRepo:    
         Type: "AWS::ECR::Repository"
         Properties: 
           RepositoryName: !Sub ${EnvironmentName}-repository
      
    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups:
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    packages:
                        yum:
                            awslogs: []

                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                        "/etc/awslogs/awscli.conf":
                            content: !Sub |
                                [plugins]
                                cwlogs = cwlogs
                                [default]
                                region = ${AWS::Region}
                        "/etc/awslogs/awslogs.conf":
                            content: !Sub |
                                [general]
                                state_file = /var/lib/awslogs/agent-state
                                [/var/log/dmesg]
                                file = /var/log/dmesg
                                log_group_name = ${ECSCluster}-/var/log/dmesg
                                log_stream_name = ${ECSCluster}
                                [/var/log/messages]
                                file = /var/log/messages
                                log_group_name = ${ECSCluster}-/var/log/messages
                                log_stream_name = ${ECSCluster}
                                datetime_format = %b %d %H:%M:%S
                                [/var/log/docker]
                                file = /var/log/docker
                                log_group_name = ${ECSCluster}-/var/log/docker
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                                [/var/log/ecs/ecs-init.log]
                                file = /var/log/ecs/ecs-init.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ
                                [/var/log/ecs/ecs-agent.log]
                                file = /var/log/ecs/ecs-agent.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ
                                [/var/log/ecs/audit.log]
                                file = /var/log/ecs/audit.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ
                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                            awslogs:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/awslogs/awslogs.conf
                                    - /etc/awslogs/awscli.conf

 

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:GetManifest",
                                "ssm:GetParameters",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply",
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeInstanceStatus",
                                "ds:CreateComputer",
                                "ds:DescribeDirectories",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:AbortMultipartUpload",
                                "s3:ListMultipartUploadParts",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads"
                            ],
                            "Resource": "*"
                        }]
                    }
    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    ECSServiceAutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                        - application-autoscaling.amazonaws.com
            Path: /
            Policies:
            - PolicyName: ecs-service-autoscaling
              PolicyDocument:
                  Statement:
                      Effect: Allow
                      Action:
                      - application-autoscaling:*
                      - cloudwatch:DescribeAlarms
                      - cloudwatch:PutMetricAlarm
                      - ecs:DescribeServices
                      - ecs:UpdateService
                      Resource: "*"
                      
#####################Alarms and autoscaling ############################################################  
    EcsScaleOutPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            AdjustmentType: ChangeInCapacity
            Cooldown: 300
            PolicyType: SimpleScaling
            ScalingAdjustment: 1
            
    EcsScaleInPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            AdjustmentType: ChangeInCapacity
            Cooldown: 300
            PolicyType: SimpleScaling
            ScalingAdjustment: -1

    # AUTOSCALING SNS TOPIC            
    EcsAutoScalingSnsTopic:
        Type: AWS::SNS::Topic
        Properties: 
            TopicName: !Sub ${EnvironmentName}-sns          
    # CLOUDWATCH ALARMS - SCALE OUT EVENTS
    EcsCpuReservationAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            ActionsEnabled: true
            AlarmActions:
            - !Ref EcsScaleOutPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale out if CPU reservation of autoscaling group 
                              is > 90% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: CPUReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 90
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
    
    EcsMemoryReservationAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmActions:
            - !Ref EcsScaleOutPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale out if memory reservation of autoscaling group 
                              is > 90% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 90
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster

    ECSFullDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if disk capacity is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DiskSpaceUtilization
            Namespace: System/Linux
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: MountPath
                Value: "/"
              - Name: AutoScalingGroupName
                Value: !Ref ECSAutoScalingGroup
              - Name: Filesystem
                Value: /dev/xvda1

    ECSContainerFullDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if disk capacity is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DataStorageUtilization
            Namespace: ECS
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster

    ECSHighMemory:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if memory usage is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster

    ECSHighCPU:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if CPU utilization is over 60%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: CPUUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 60.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster                      
   
# CLOUDWATCH ALARMS - SCALE IN EVENTS
    EcsCpuReservationAlarmLow:
        Type: AWS::CloudWatch::Alarm
        Properties:
            ActionsEnabled: true
            OKActions:
            - !Ref EcsScaleInPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale in if CPU reservation of autoscaling group 
                              is < 25% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: CPUReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 25
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster
    
    EcsMemoryReservationAlarmLow:
        Type: AWS::CloudWatch::Alarm
        Properties:
            OKActions:
            - !Ref EcsScaleInPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale in if memory reservation of autoscaling group 
                              is < 25% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 25
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref ECSCluster

    ECSEmptyDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            OKActions:
              - !Ref EcsScaleInPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Remove instance if disk capacity is under 25%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DiskSpaceUtilization
            Namespace: System/Linux
            Statistic: Average
            Threshold: 25.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: MountPath
                Value: "/"
              - Name: AutoScalingGroupName
                Value: !Ref ECSAutoScalingGroup
              - Name: Filesystem
                Value: /dev/xvda1

    ECSContainerEmptyDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            OKActions:
              - !Ref EcsScaleInPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Remove instance if disk capacity is under 25%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DataStorageUtilization
            Namespace: ECS
            Statistic: Average
            Threshold: 25.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster

    ECSLowMemory:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            OKActions:
              - !Ref EcsScaleInPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Remove instance if memory usage is under 25%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 25.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster

    ECSLowCPU:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            OKActions:
              - !Ref EcsScaleInPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Remove instance if CPU utilization is under 20%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: CPUUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 20.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster
   
##################################################
Outputs:
    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster
        Export:
            Name: ECSCluster

    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value: !GetAtt ECSServiceAutoScalingRole.Arn
        Export:
            Name: ECSServiceAutoScalingRoleARN

    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value: !Ref ECSAutoScalingGroup
        Export:
            Name: ECSAutoScalingGroup
    EcsRepoArn:
        Description: The just created Repository
        Value: !GetAtt ECSRepo.Arn
        Export:
            Name: EcsRepoARN
